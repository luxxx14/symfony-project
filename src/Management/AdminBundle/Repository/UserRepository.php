<?php

namespace Management\AdminBundle\Repository;
use Doctrine\ORM\EntityRepository;
use SocialNetwork\TournamentsBundle\Entity\Tournament;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository /*implements UserProviderInterface*/ {
    public function getNumberOfUsers($sex = NULL) {

        return !$sex ?
            $this->getEntityManager()
                ->createQueryBuilder()
                ->select('COUNT(u)')
                ->from('ManagementAdminBundle:User', 'u')
                ->where('u.roles NOT LIKE :role')
                ->setParameter('role', '%ROLE_ADMIN%')
                ->getQuery()
                ->getSingleScalarResult() :

            $this->getEntityManager()
                ->createQueryBuilder()
                ->select('COUNT(u)')
                ->from('ManagementAdminBundle:User', 'u')
                ->where('u.roles NOT LIKE :role')
                ->andWhere('u.sex = :sex')
                ->setParameter('role', '%ROLE_ADMIN%')
                ->setParameter('sex', $sex)
                ->getQuery()
                ->getSingleScalarResult()
            ;
    }

    public function loadUserByUsername($uid) {
        $user = $this->loadUserBySocialID($uid);

        if (!$user) {
            throw new UsernameNotFoundException('Не найдено пользователей с идентификатором ' . $uid);
        }

        return $user;
    }

    public function loadUserByOdnoklassnikiID($uid) {
        return $this->createQueryBuilder('u')
            ->where('u.okId = :uid')
            ->setParameter('uid', $uid)
            ->getQuery()
            ->getOneOrNullResult();
    }

//    public function refreshUser(UserInterface $user) {
//        // TODO: Implement refreshUser() method.
//    }
//
//    public function supportsClass($class) {
//        // TODO: Implement supportsClass() method.
//    }

    public function loadUserBySocialID($uid) {
        return $this->createQueryBuilder('u')
            ->where('u.vkId = :uid OR u.okId = :uid')
            ->setParameter('uid', $uid)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getUsersOfTournament(Tournament $tournament) {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from('ManagementAdminBundle:User', 'u')
            ->leftJoin('u.tournaments', 't')
            ->where('t = :tournament')
            ->setParameter('tournament', $tournament)
            ->orderBy('u.points', 'DESC')
            ->getQuery()
            ->getResult();
    }

//    public function getUsersOfTournament(Tournament $tournament) { // Дима, WTF???
//        return $this->getEntityManager()
//            ->createQueryBuilder()
//            ->select('u')
//            ->from('ManagementAdminBundle:User', 'u')
//            ->leftJoin('u.tournaments', 'l')
//            ->where('l.tournament = :tournament')
//            ->setParameter('tournament', $tournament)
//            ->orderBy('u.points', 'DESC')
//            ->getQuery()
//            ->getResult();
//    }
}